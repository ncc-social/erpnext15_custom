[
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Employee",
  "enabled": 1,
  "modified": "2023-12-07 23:01:52.442906",
  "module": "Erpnext15 Custom",
  "name": "Employee-Form",
  "script": "frappe.ui.form.on(\"Employee\", {\n\trefresh(frm) {\n\t\tlet duration = moment.duration(moment().diff(cur_frm.doc.date_of_birth));\n        const formatDuration = (duration) => {\n            let years = duration.years();\n            let months= duration.months();\n            let days= duration.days();\n            let result = '';\n            if (years === 1) {\n                result += '1 year ';\n            } else if (years > 1) {\n                result += years + ' years ';\n            }\n            if (months === 1) {\n                result += '1 month ';\n            } else if (months > 1) {\n                result += months + ' months ';\n            }\n            if (days === 1) {\n                result += '1 day ';\n            } else if (days > 1) {\n                result += days + ' days ';\n            }\n            return result;\n        }\n        \n        frm.set_value(\"custom_age\", formatDuration(duration));\n        frm.add_fetch('reports_to',  'employee_name',  'reports_to_name');\n        \n\t}\n\n})",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Leave Application",
  "enabled": 1,
  "modified": "2024-02-12 08:41:39.836417",
  "module": "Erpnext15 Custom",
  "name": "Leave Application-List",
  "script": "// first, we'll extend the base ListView class described here:\n// https://github.com/frappe/frappe/blob/e8c1a27a7a0c66ffad165bb2c6b3fa3d603228c4/frappe/public/js/frappe/list/list_view.js#L6\nfrappe.views.ListView = class ListView extends frappe.views.ListView {\n    // Override the method to generate list view row HTML skeleton\n    get_list_row_html_skeleton(left = \"\", right = \"\", details = \"\") {\n        // Check if the current doctype is \"Leave Application\"\n        if (this.doctype !== \"Leave Application\") return;\n\n        // Ensure details is not null\n        if (details === null) { details = \"\" }\n\n        // Define default background and color\n        let background = 'inherit';\n        let color = 'inherit';\n\n        // Check the text content of details and assign background and color accordingly\n        switch (details.trim()) {\n            case 'Draft':\n                background = '#fff1e7';\n                color = '#bd3e0c';\n                break;\n            case 'Sent to Head for Approval':\n            case 'Sent to Director for Approval':\n            case 'Sent to Director-General for Approval':\n                background = '#edf6fd';\n                color = '#0070cc';\n                break;\n            case 'Leave APPROVED':\n                background = '#e4f5e9';\n                color = '#16794c';\n                break;\n            case 'Leave REJECTED':\n                background = '#fff0f0';\n                color = '#b52a2a';\n                break;\n            case 'Leave CANCELLED':\n                background = '#f3f3f3';\n                color = '#525252';\n                break;\n        }\n\n        // Return the simplified customized list view row HTML skeleton with added background and color\n        return `\n            <div class=\"list-row-container\" tabindex=\"1\">\n                <div class=\"level list-row\">\n                    <div class=\"level-left ellipsis\">\n                        ${left}\n                    </div>\n                    <div class=\"level-right text-muted ellipsis\">\n                        ${right}\n                    </div>\n                </div>\n                <div class=\"level list-row details-row\">\n                    <span class=\"mobile-status\" style=\"background: ${background}; color: ${color};\"> ${details}</span>\n                </div>\n            </div>\n        `;\n    }\n\n    // Override the method to generate list view row HTML\n    get_list_row_html(doc) {\n        // Generate the list view row HTML using the extended template\n        return this.get_list_row_html_skeleton(\n            this.get_left_html(doc),\n            this.get_right_html(doc),\n            doc.workflow_state\n        );\n    }\n}\n\n// Add CSS styles for the new content\ndocument.querySelector('style').textContent +=\n    `@media (min-width: 768px) { \n        .list-row-container .details-row { display: none; }\n        .list-subject { flex: 1; } /* Set flex property of list-subject to 1 */\n    }\n    @media only screen and (max-width: 600px) {\n        .level-item .indicator-pill { display: none; }\n    }\n    .list-row-container .details-row {\n        color: #666;\n        padding: 0 40px !important;\n    }\n    .mobile-status {\n        padding: 3px 8px;\n        border-radius: 999px;\n        font-size: 12px;\n    }\n    `;\n\nfrappe.listview_settings['Leave Application'] = {\n    colwidths: {\n        \"status\": 200\n    },\n    \n    hide_name_column: true, // hide the last column which shows the `name`\n    \n    // add a custom button for each row\n    // button: {\n    //     show(doc) {\n    //         return doc.docstatus == 1;\n    //     },\n    //     get_label() {\n    //         return 'View';\n    //     },\n    //     get_description(doc) {\n    //         //return __('View {0}', [`${doc.name}`])\n    //         return __('View Details')\n    //     },\n    //     action(doc) {\n    //         frappe.set_route('Form', 'Leave Application', doc.name);\n    //     }\n    // }\n}",
  "view": "List"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Leave Application",
  "enabled": 1,
  "modified": "2024-02-08 07:14:44.555735",
  "module": "Erpnext15 Custom",
  "name": "Leave Application-Form",
  "script": "frappe.ui.form.on(\"Leave Application\", {\n    onload: function(frm) {\n        // Example: Hide the \"Expired Leaves\" column\n        hideExpiredLeavesColumn();\n    },\n    refresh: function(frm) {\n        if (!frm.doc.__islocal) {\n            frm.trigger(\"show_dashboard\");\n        }\n    },\n    employee: function(frm) {\n        // Example: Hide the \"Expired Leaves\" column\n        hideExpiredLeavesColumn();\n    },\n    from_date: function(frm) {\n        // Example: Hide the \"Expired Leaves\" column\n        hideExpiredLeavesColumn();\n    },\n    to_date: function(frm) {\n        // Example: Hide the \"Expired Leaves\" column\n        hideExpiredLeavesColumn();\n    },\n    leave_approver: function(frm) {\n        // Triggered when the 'Leave Approver' field changes\n        const leaveApprover = frm.doc.leave_approver;\n\n        if (leaveApprover) {\n            // Fetch the full name of the selected user\n            frappe.call({\n                method: 'frappe.client.get_value',\n                args: {\n                    doctype: 'User',\n                    filters: { 'name': leaveApprover },\n                    fieldname: ['full_name']\n                },\n                callback: function(response) {\n                    const fullName = response.message.full_name;\n                    // Set the fetched full name in leave_approver_name field\n                    frm.set_value('leave_approver_name', fullName);\n                }\n            });\n        } else {\n            // Clear the leave_approver_name field if 'Leave Approver' is cleared\n            frm.set_value('leave_approver_name', '');\n        }\n    },\n    show_dashboard: function(frm) {\n\t\tlet leave_details;\n\t\tlet lwps;\n\n\t\tif (frm.doc.employee) {\n\t\t\tfrappe.call({\n\t\t\t\tmethod: \"erpnext15_custom.my_scripts.leave_application.get_leave_details\",\n\t\t\t\tasync: false,\n\t\t\t\targs: {\n\t\t\t\t\temployee: frm.doc.employee,\n\t\t\t\t\tdate: frm.doc.from_date || frm.doc.posting_date,\n\t\t\t\t\tleave_type: frm.doc.leave_type\n\t\t\t\t},\n\t\t\t\tcallback: function(r) {\n\t\t\t\t\tif (!r.exc && r.message[\"leave_allocation\"]) {\n\t\t\t\t\t\tleave_details = r.message[\"leave_allocation\"];\n\t\t\t\t\t}\n\t\t\t\t\tif (!r.exc && r.message[\"leave_approver\"]) {\n\t\t\t\t\t\tfrm.set_value(\"leave_approver\", r.message[\"leave_approver\"]);\n\t\t\t\t\t}\n\t\t\t\t\tlwps = r.message[\"lwps\"];\n\t\t\t\t}\n\t\t\t});\n\n\t\t\t$(\"div\").remove(\".form-dashboard-section.custom\");\n\n\t\t\tfrm.dashboard.add_section(\n\t\t\t\tfrappe.render_template(\"leave_application_dashboard\", {\n\t\t\t\t\tdata: leave_details\n\t\t\t\t})\n\t\t\t);\n\t\t\tfrm.dashboard.show();\n\t\t\thideExpiredLeavesColumn();\n\t\t\tif($(window).width() < 480) { \n                $('.custom').css('font-size','12px');\n            }\n\n\t\t\tlet allowed_leave_types = Object.keys(leave_details);\n\t\t\t// lwps should be allowed for selection as they don't have any allocation\n\t\t\tallowed_leave_types = allowed_leave_types.concat(lwps);\n\n\t\t\tfrm.set_query(\"leave_type\", function() {\n\t\t\t\treturn {\n\t\t\t\t\tfilters: [\n\t\t\t\t\t\t[\"leave_type_name\", \"in\", allowed_leave_types]\n\t\t\t\t\t]\n\t\t\t\t};\n\t\t\t});\n\t\t}\n\t}\n});\n\n\n\nfunction hideExpiredLeavesColumn() {\n    // Get the table and hide the third column\n    if($(window).width() < 480) { \n        $('.custom .section-body').css('font-size','10px');\n    }\n    var table = $('.form-dashboard-section').find('table');\n    table.find('th:contains(\"Expired Leaves\"), td:nth-child(3), th:nth-child(3)').hide();\n    \n}",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Leave Application",
  "enabled": 0,
  "modified": "2023-10-30 10:55:22.265658",
  "module": "Erpnext15 Custom",
  "name": "Send SMS for Leave Application",
  "script": "frappe.ui.form.on(\"Leave Application\", \"on_submit\", function(frm, cdt, cdn) {\n\tvar message = \"\";\n\tif (frm.doc.workflow_state == \"Leave REJECTED\") {\n\t\tmessage = 'Your leave application for ' + frm.doc.total_leave_days + ' days has been REJECTED';\n\t} else if (frm.doc.workflow_state == \"Leave APPROVED\") {\n\t\tmessage = 'Your leave application for ' + frm.doc.total_leave_days + ' days has been APPROVED';\n\t}\n\tfrappe.call({\n\t\tmethod: \"frappe.core.doctype.sms_settings.sms_settings.send_sms\",\n\t\targs: {\n\t\t\treceiver_list: [frm.doc.cell_number],\n\t\t\tmsg: message,\n\t\t},\n\t\tcallback: function(r) {\n\t\t\tif (r.exc) {\n\t\t\t\tmsgprint(r.exc);\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t});\n})",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Employee",
  "enabled": 0,
  "modified": "2023-12-07 23:05:13.730689",
  "module": "Erpnext15 Custom",
  "name": "Employee Folio Number",
  "script": "frappe.ui.form.on('Employee', {\n\trefresh: function(frm) {\n\t\tvar text = frm.doc.employee_number;\n\n        // Use a regular expression to extract \"JD\" or \"SD\" followed by numbers and \"/\"\n        var match = text.match(/(JD|SD)(\\d+)\\/(\\d+)/);\n\n        if (match) {\n            var extractedValue = match[1] + match[3];\n            frm.set_value('custom_folio_number', extractedValue);\n        } else {\n            console.log(\"Pattern not found.\");\n        }\n\t}\n})",
  "view": "Form"
 }
]