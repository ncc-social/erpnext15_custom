[
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Employee",
  "enabled": 1,
  "modified": "2023-12-07 23:01:52.442906",
  "module": "Erpnext15 Custom",
  "name": "Employee-Form",
  "script": "frappe.ui.form.on(\"Employee\", {\n\trefresh(frm) {\n\t\tlet duration = moment.duration(moment().diff(cur_frm.doc.date_of_birth));\n        const formatDuration = (duration) => {\n            let years = duration.years();\n            let months= duration.months();\n            let days= duration.days();\n            let result = '';\n            if (years === 1) {\n                result += '1 year ';\n            } else if (years > 1) {\n                result += years + ' years ';\n            }\n            if (months === 1) {\n                result += '1 month ';\n            } else if (months > 1) {\n                result += months + ' months ';\n            }\n            if (days === 1) {\n                result += '1 day ';\n            } else if (days > 1) {\n                result += days + ' days ';\n            }\n            return result;\n        }\n        \n        frm.set_value(\"custom_age\", formatDuration(duration));\n        frm.add_fetch('reports_to',  'employee_name',  'reports_to_name');\n        \n\t}\n\n})",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Leave Application",
  "enabled": 1,
  "modified": "2023-10-30 10:53:06.602750",
  "module": "Erpnext15 Custom",
  "name": "Leave Application-List",
  "script": "frappe.listview_settings['Leave Application'] = frappe.listview_settings['Leave Application'] || {};\nfrappe.listview_settings['Leave Application'] = {\n    // add fields to fetch\n    add_fields: ['employee_name', 'leave_type', 'from_date', 'to_date', 'status'],\n    \n    hide_name_column: true, // hide the last column which shows the `name`\n    \n    // add a custom button for each row\n    button: {\n        show(doc) {\n            return doc.docstatus == 1;\n        },\n        get_label() {\n            return 'View';\n        },\n        get_description(doc) {\n            //return __('View {0}', [`${doc.name}`])\n            return __('View Details')\n        },\n        action(doc) {\n            frappe.set_route('Form', 'Leave Application', doc.name);\n        }\n    }\n}",
  "view": "List"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Leave Application",
  "enabled": 1,
  "modified": "2023-12-25 09:34:14.575695",
  "module": "Erpnext15 Custom",
  "name": "Leave Application-Form",
  "script": "// cur_frm.add_fetch('employee',  'branch',  'branch');\nfrappe.ui.form.on(\"Leave Application\", {\n    onload: function(frm) {\n        // Execute your JavaScript code here\n\n        // Example: Hide the \"Expired Leaves\" column\n        hideExpiredLeavesColumn();\n    },\n    refresh: function(frm) {\n        frm.trigger(\"show_dashboard\");\n    },\n    employee: function(frm) {\n        // Execute your JavaScript code here\n\n        // Example: Hide the \"Expired Leaves\" column\n        hideExpiredLeavesColumn();\n    },\n    from_date: function(frm) {\n        // Execute your JavaScript code here\n\n        // Example: Hide the \"Expired Leaves\" column\n        hideExpiredLeavesColumn();\n    },\n    to_date: function(frm) {\n        // Execute your JavaScript code here\n\n        // Example: Hide the \"Expired Leaves\" column\n        hideExpiredLeavesColumn();\n    },\n//     leave_approver: function(frm) {\n// \t\tif (frm.doc.leave_approver) {\n// \t\t\tfrm.set_value(\"leave_approver_name\", frappe.user_info(frm.doc.leave_approver).fullname);\n// \t\t}\n// \t},\n    // before_workflow_action: function (frm) {\n    //     if (frm.selected_workflow_action === 'Refuse') {\n    //         frappe.prompt([\n    //             {\n    //                 fieldname: 'reject_reason',\n    //                 label: 'Reason for rejection',\n    //                 fieldtype: 'Small Text',\n    //                 reqd: 1,\n    //             },\n    //         ], function (values) {\n    //             if (values.reject_reason.trim() !== '') {\n    //                 // Save the rejection reason to the document\n    //                 frm.set_value('rejection_reason', values.reject_reason);\n\n    //                 // Continue with the workflow action\n    //                 frm.workflow_state = action;\n    //                 frm.save('Cancel');\n    //             } else {\n    //                 frappe.msgprint(__('Please provide a reason for rejection.'));\n    //                 frappe.ui.form.on('Leave Application', {\n    //                     validate: function(frm) {\n    //                         frm.savecancel();\n    //                     }\n    //                 });\n    //             }\n    //         }, 'Rejection Reason');\n\n    //         // Return false to prevent the default workflow action\n    //         return false;\n    //     }\n    // }\n    \n    // --WORKING A LITTLE, LEFT WITH THE SECOND PROMISE --\n    // before_workflow_action: async (frm) => {\n    //     console.log(frm.selected_workflow_action);\n    //     if (\n    //         frm.selected_workflow_action === \"Refuse\"\n    //     ) {\n    //         let confirm = new Promise((resolve, reject) => {\n    //             frappe.confirm(\n    //                 '<b>Are you sure you want to reject this leave application?</b>',\n    //                 () => resolve(),\n    //                 () => reject()\n    //             );\n    //             $(\"#freeze\").css(\"display\", \"none\");\n    //         });\n    //         await confirm.then(\n    //             () => {\n    //                 var leave_title = (frm.doc.leave_type === \"Annual Leave - JD\" || frm.doc.leave_type === \"Annual Leave - SD\") ? \"Annual Leave\" : frm.doc.leave_type;\n    //                 frappe.prompt([\n    //                     {\n    //                         fieldname: 'reject_reason',\n    //                         label: 'Reason for rejection',\n    //                         fieldtype: 'Small Text',\n    //                         reqd: 1,\n    //                     },\n    //                 ], (values) => {\n    //                     // Save the rejection reason to the document\n    //                     frm.set_value('custom_rejection_reason', values.reject_reason);\n    //                     frm.set_value('status', 'Rejected');\n    //                     frm.set_value('workflow_state', 'Leave REJECTED');\n                        \n    //                     frm.save().then(() => {\n    //                         frappe.show_alert({\n    //                             message: __(\"Leave application rejected successfully\"),\n    //                             indicator: 'green'\n    //                         }, 5);\n    //                     });\n    //                 }, frm.doc.employee_name +'\\'s ' + leave_title + ' Application');\n    //             }\n    //         );\n    //     }\n    // }\n    \n    before_workflow_action: async (frm) => {\n        //console.log(frm.selected_workflow_action);\n        if (frm.doc.workflow_state && frm.selected_workflow_action === \"Reject\") {\n            frappe.dom.freeze();\n            var leave_title = (frm.doc.leave_type === \"Annual Leave - JD\" || frm.doc.leave_type === \"Annual Leave - SD\") ? \"Annual Leave\" : frm.doc.leave_type;\n            $(\"#freeze\").css(\"display\", \"none\");\n            try {\n                const values = await new Promise((resolve, reject) => {\n                    frappe.prompt([\n                        {\n                            fieldname: 'reject_reason',\n                            label: 'Reason for rejection',\n                            fieldtype: 'Small Text',\n                            reqd: 1,\n                        },\n                    ], (values) => {\n                        resolve(values);\n                    }, frm.doc.employee_name +'\\'s ' + leave_title + ' Application');\n                });\n\n                // Save the rejection reason to the document\n                frm.set_value('custom_rejection_reason', values.reject_reason);\n                frm.set_value('status', 'Rejected');\n                frm.set_value('workflow_state', 'Leave REJECTED');\n                \n                await frm.save();\n                $(\".modal-content\").hide();\n                $(\".modal-backdrop\").hide();\n                \n                frappe.show_alert({\n                    message: __(\"Leave application rejected successfully\"),\n                    indicator: 'green'\n                }, 5);\n            } catch (error) {\n                // Handle error or simply do nothing\n            } finally {\n                frappe.dom.unfreeze();\n                //console.log(\"Before modal hide\");\n                \n                \n            }\n        }\n    },\n    show_dashboard: function(frm) {\n\t\tlet leave_details;\n\t\tlet lwps;\n\n\t\tif (frm.doc.employee) {\n\t\t\tfrappe.call({\n\t\t\t\tmethod: \"hrms.hr.doctype.leave_application.leave_application.get_leave_details\",\n\t\t\t\tasync: false,\n\t\t\t\targs: {\n\t\t\t\t\temployee: frm.doc.employee,\n\t\t\t\t\tdate: frm.doc.from_date || frm.doc.posting_date\n\t\t\t\t},\n\t\t\t\tcallback: function(r) {\n\t\t\t\t\tif (!r.exc && r.message[\"leave_allocation\"]) {\n\t\t\t\t\t\tleave_details = r.message[\"leave_allocation\"];\n\t\t\t\t\t}\n\t\t\t\t\tif (!r.exc && r.message[\"leave_approver\"]) {\n\t\t\t\t\t\tfrm.set_value(\"leave_approver\", r.message[\"leave_approver\"]);\n\t\t\t\t\t}\n\t\t\t\t\tlwps = r.message[\"lwps\"];\n\t\t\t\t}\n\t\t\t});\n\n\t\t\t$(\"div\").remove(\".form-dashboard-section.custom\");\n\n\t\t\tfrm.dashboard.add_section(\n\t\t\t\tfrappe.render_template(\"leave_application_dashboard\", {\n\t\t\t\t\tdata: leave_details\n\t\t\t\t})\n\t\t\t);\n\t\t\tfrm.dashboard.show();\n\t\t\thideExpiredLeavesColumn();\n\n\t\t\tlet allowed_leave_types = Object.keys(leave_details);\n\t\t\t// lwps should be allowed for selection as they don't have any allocation\n\t\t\tallowed_leave_types = allowed_leave_types.concat(lwps);\n\n\t\t\tfrm.set_query(\"leave_type\", function() {\n\t\t\t\treturn {\n\t\t\t\t\tfilters: [\n\t\t\t\t\t\t[\"leave_type_name\", \"in\", allowed_leave_types]\n\t\t\t\t\t]\n\t\t\t\t};\n\t\t\t});\n\t\t}\n\t}\n    // after_save: async (frm) => {\n    //     if (frm.doc.workflow_state && frm.doc.workflow_state.indexOf(\"Refuse\") > 0){\n    //         let prompt = new Promise((resolve, reject) => {\n    //             frappe.confirm(\n    //                 'Are you sure?',\n    //                 () => resolve(),\n    //                 () => reject()\n    //             );\n    //         });\n    //         await prompt.then(\n    //             () => {\n    //                 var leave_title = (frm.doc.leave_type === \"Annual Leave - JD\" || frm.doc.leave_type === \"Annual Leave - SD\") ? \"Annual Leave\" : frm.doc.leave_type;\n    //                 frappe.prompt([\n    //                     {\n    //                         fieldname: 'reject_reason',\n    //                         label: 'Reason for rejection',\n    //                         fieldtype: 'Small Text',\n    //                         reqd: 1,\n    //                     },\n    //                 ], (values) => {\n    //                     // Save the rejection reason to the document\n    //                     frm.set_value('custom_rejection_reason', values.reject_reason);\n    //                     frm.set_value('status', 'Rejected');\n    //                     frm.set_value('workflow_state', 'Leave REJECTED');\n                        \n    //                     frm.save().then(() => {\n    //                         frappe.show_alert({\n    //                             message: __(\"Document rejected successfully\"),\n    //                             indicator: 'green'\n    //                         }, 5);\n    //                     });\n    //                 }, frm.doc.employee_name +'\\'s ' + leave_title + ' Application');\n    //             }\n    //             // () => frappe.show_alert(\"Submitted\", 3), \n    //             // () => {\n    //             //     frappe.validated = false;\n    //             //     frappe.show_alert(\"Not submitted\", 3)\n    //             // }\n    //         );\n    //     }\n    // },\n    // after_save: (frm) => {\n    //     if (frm.doc.workflow_state && frm.doc.workflow_state.indexOf(\"Refuse\") > 0){\n    //         frappe.confirm(\n    //             \"<b>Are you sure you want to reject this leave application?</b>\",\n    //             () => {\n    //                 var leave_title = (frm.doc.leave_type === \"Annual Leave - JD\" || frm.doc.leave_type === \"Annual Leave - SD\") ? \"Annual Leave\" : frm.doc.leave_type;\n    //                 frappe.prompt([\n    //                     {\n    //                         fieldname: 'reject_reason',\n    //                         label: 'Reason for rejection',\n    //                         fieldtype: 'Small Text',\n    //                         reqd: 1,\n    //                     },\n    //                 ], (values) => {\n    //                     // Save the rejection reason to the document\n    //                     frm.set_value('custom_rejection_reason', values.reject_reason);\n    //                     frm.set_value('status', 'Rejected');\n    //                     frm.set_value('workflow_state', 'Leave REJECTED');\n                        \n    //                     frm.save().then(() => {\n    //                         frappe.show_alert({\n    //                             message: __(\"Document rejected successfully\"),\n    //                             indicator: 'green'\n    //                         }, 5);\n    //                     });\n    //                 }, frm.doc.employee_name +'\\'s ' + leave_title + ' Application');\n    //             }\n    //         );\n    //     }\n    // },\n    // refresh: (frm) => {\n    //     //$(\"li:has([data-label='Refuse'])\").hide();\n    //     //Add a custom button for the \"Reject\" action\n    //     if (frm.doc.workflow_state.includes(\"Sent to\") && frappe.user_roles.includes(\"Leave Approver\")) {\n    //         frm.page.add_action_item(__('Reject'), () => {\n    //             frappe.confirm(\n    //                 \"<b>Are you sure you want to reject this leave application?</b>\",\n    //                 () => {\n    //                     var leave_title = (frm.doc.leave_type === \"Annual Leave - JD\" || frm.doc.leave_type === \"Annual Leave - SD\") ? \"Annual Leave\" : frm.doc.leave_type;\n    //                     frappe.prompt([\n    //                         {\n    //                             fieldname: 'reject_reason',\n    //                             label: 'Reason for rejection',\n    //                             fieldtype: 'Small Text',\n    //                             reqd: 1,\n    //                         },\n    //                     ], (values) => {\n    //                         // Save the rejection reason to the document\n    //                         frm.set_value('custom_rejection_reason', values.reject_reason);\n    //                         frm.set_value('status', 'Rejected');\n    //                         frm.set_value('workflow_state', 'Leave REJECTED');\n                            \n    //                         frm.save().then(() => {\n    //                             frappe.show_alert({\n    //                                 message: __(\"Document rejected successfully\"),\n    //                                 indicator: 'green'\n    //                             }, 5);\n    //                         });\n    //                     }, frm.doc.employee_name +'\\'s ' + leave_title + ' Application');\n    //                 }\n    //             );\n    //         }).css({\"color\":\"red\"});\n    //     }\n    // }\n\n});\n\n\n\nfunction hideExpiredLeavesColumn() {\n    // Get the table and hide the third column\n    var table = $('.form-dashboard-section').find('table');\n    table.find('th:contains(\"Expired Leaves\"), td:nth-child(3), th:nth-child(3)').hide();\n}\n\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Leave Application",
  "enabled": 0,
  "modified": "2023-10-30 10:55:22.265658",
  "module": "Erpnext15 Custom",
  "name": "Send SMS for Leave Application",
  "script": "frappe.ui.form.on(\"Leave Application\", \"on_submit\", function(frm, cdt, cdn) {\n\tvar message = \"\";\n\tif (frm.doc.workflow_state == \"Leave REJECTED\") {\n\t\tmessage = 'Your leave application for ' + frm.doc.total_leave_days + ' days has been REJECTED';\n\t} else if (frm.doc.workflow_state == \"Leave APPROVED\") {\n\t\tmessage = 'Your leave application for ' + frm.doc.total_leave_days + ' days has been APPROVED';\n\t}\n\tfrappe.call({\n\t\tmethod: \"frappe.core.doctype.sms_settings.sms_settings.send_sms\",\n\t\targs: {\n\t\t\treceiver_list: [frm.doc.cell_number],\n\t\t\tmsg: message,\n\t\t},\n\t\tcallback: function(r) {\n\t\t\tif (r.exc) {\n\t\t\t\tmsgprint(r.exc);\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t});\n})",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Employee",
  "enabled": 0,
  "modified": "2023-12-07 23:05:13.730689",
  "module": "Erpnext15 Custom",
  "name": "Employee Folio Number",
  "script": "frappe.ui.form.on('Employee', {\n\trefresh: function(frm) {\n\t\tvar text = frm.doc.employee_number;\n\n        // Use a regular expression to extract \"JD\" or \"SD\" followed by numbers and \"/\"\n        var match = text.match(/(JD|SD)(\\d+)\\/(\\d+)/);\n\n        if (match) {\n            var extractedValue = match[1] + match[3];\n            frm.set_value('custom_folio_number', extractedValue);\n        } else {\n            console.log(\"Pattern not found.\");\n        }\n\t}\n})",
  "view": "Form"
 }
]